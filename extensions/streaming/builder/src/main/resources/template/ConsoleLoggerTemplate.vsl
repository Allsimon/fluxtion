## Velocity Template.
package ${functionPackage};

#foreach( $import in $imports)
import $import;
#end
/**
 * Generated notificationToLogger. 
 *
 * @author Greg Higgins
 */
public class ${functionClass} extends LogMsgBuilder{

    //source operand inputs
#foreach($sourceInfo in $sourceMappingList)
#if(${updateNotifier})  
    @NoEventReference
#end
    public ${sourceInfo.type} ${sourceInfo.id};
#end    
#if(${updateNotifier})
    public Object logNotifier;
    private boolean notificationToLog;
    
    @OnParentUpdate(value = "logNotifier")
    public void postLog(Object logNotifier){
        notificationToLog = true;
    }

    @OnEvent
    public boolean logMessage() {
        if(notificationToLog & isGoodToLog()){
#foreach($valueAccessor in $valueAccessorList)
            msgSink.append("${valueAccessor.message}");
            msgSink.append(${valueAccessor.value});
#end
            msgSink.append("${lastMessage}");
            notificationToLog = false;
            log();
            return true;
        }
        notificationToLog = false;
        return false;
    }
#else

    @OnEvent
    public boolean logMessage() {
        if(!isGoodToLog())
            return false;
#foreach($valueAccessor in $valueAccessorList)
        msgSink.append("${valueAccessor.message}");
        msgSink.append(${valueAccessor.value});
#end
        msgSink.append("${lastMessage}");
        log();
        return true;
    }
#end
}

