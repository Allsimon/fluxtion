## Velocity Template.
package ${package};

import com.fluxtion.api.lifecycle.BatchHandler;
import com.fluxtion.api.lifecycle.EventHandler;
import com.fluxtion.api.lifecycle.Lifecycle;
#if(${MODEL.imports})
${MODEL.imports}
#end

public class ${className} implements EventHandler, BatchHandler, Lifecycle {

//Node declarations
${MODEL.nodeDeclarations}
//Dirty flags
${MODEL.dirtyFlagDeclarations}
//Filter constants
${MODEL.filterConstantDeclarations}

    public ${className} () {
${MODEL.nodeMemberAssignments}
        init();
    }

    public DispatchingCsvMarshaller addMarshaller(Class wrapper, EventHandler handler) {
        dispatcher.addMarshaller(wrapper, handler);
        return this;
    }

    public DispatchingCsvMarshaller addMarshaller(Class wrapper, String handlerClass) throws Exception {
        dispatcher.addMarshaller(wrapper, (EventHandler) Class.forName(handlerClass).newInstance());
        return this;
    }

    public DispatchingCsvMarshaller addSink(EventHandler handler) {
        return addSink(handler, true);
    }

    public DispatchingCsvMarshaller addSink(EventHandler handler, boolean init) {
        dispatcher.setSink(handler);
        if(init){
            if(handler instanceof Lifecycle){
                ((Lifecycle)handler).init();
            }
        }
        return this;
    }

    @Override
    public void onEvent(Object event) {
${MODEL.eventDispatch}
    }

${MODEL.eventHandlers}

    @Override
    public void afterEvent() {
${MODEL.eventEndMethods}
${MODEL.resetDirtyFlags}
    }

    @Override
    public void init() {
${MODEL.initialiseMethods}
    }

    @Override
    public void tearDown() {
${MODEL.tearDownMethods}
    }

    @Override
    public void batchPause() {
${MODEL.batchPauseMethods}
    }

    @Override
    public void batchEnd() {
${MODEL.batchEndMethods}
    }

}
