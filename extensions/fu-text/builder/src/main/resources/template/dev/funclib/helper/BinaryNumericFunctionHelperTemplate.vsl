## Velocity Template.
package ${package};

import ${functionClassFqn};
import com.fluxtion.extension.declarative.funclib.api.util.LambdaReflection.SerializableSupplier;
import com.fluxtion.extension.declarative.api.Wrapper;
import com.fluxtion.extension.declarative.funclib.api.function.NumericFunctionBuilder;
import com.fluxtion.extension.declarative.api.numeric.NumericValue;
import com.fluxtion.runtime.event.Event;
import java.util.function.Function;

/**
* @author Greg Higgins
*/
public interface ${className} {
#set($operands1  = ["S op1"           , "S op1"                 , "Class<S> eventClass1, Function<S, Number> accessor1", "Wrapper<S> handler1, Function<S, Number> accessor1", "S supplier1, SerializableSupplier<S, U> accessor1" ] )
#set($args1      = ["op1"             , "op1"                   , "eventClass1, accessor1"                             , "handler1, accessor1"                               , "supplier1, accessor1" ] )
#set($type1      = ["S extends Number", "S extends NumericValue", "S extends Event"                                    , "S"                                                 , "S, U extends Number"])
#set($typeReturn = ["Number"          , "S"                     , "S"                                                  , "S"                                                 , "S"])

#set($operands2 = ["T op2"            ,"T op2"                  , "Class<T> eventClass2, Function<T, Number> accessor2", "Wrapper<T> handler2, Function<T, Number> accessor2", "T supplier2, SerializableSupplier<T, V> accessor2" ] )
#set($args2     = ["op2"              ,"op2"                    ,"eventClass2, accessor2"                              ,  "handler2, accessor2"                              , "supplier2, accessor2" ] )
#set($type2     = ["T extends Number" ,"T extends NumericValue" , "T extends Event"                                    , "T"                                                 , "T, V extends Number"])
#set($i = 0)
#foreach ($op1 in $operands1)
#foreach ($op2 in $operands2)

    public static  < $type1[$i], $type2[$foreach.index]> NumericValue ${functionName}($op1, $op2) throws Exception {
        NumericFunctionBuilder functionBuilder = NumericFunctionBuilder.function(${functionClass}.class);
        functionBuilder.input($args1[  $i ]);
        functionBuilder.input($args2[  $foreach.index ]);
        NumericValue function = functionBuilder.build();
        return function;
    }

    public static  < $type1[$i], $type2[$foreach.index]> NumericValue ${functionName}($op1, $op2, Object resetNotifier) throws Exception {
        NumericFunctionBuilder functionBuilder = NumericFunctionBuilder.function(${functionClass}.class);
        functionBuilder.input($args1[  $i ]);
        functionBuilder.input($args2[  $foreach.index ]);
        functionBuilder.resetNotifier(resetNotifier);
        NumericValue function = functionBuilder.build();
        return function;
    }
#end
#set($i = $i + 1 )
#end
}
