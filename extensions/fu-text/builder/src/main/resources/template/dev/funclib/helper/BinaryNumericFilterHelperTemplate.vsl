## Velocity Template.
package ${package};

import ${functionClassFqn};
import com.fluxtion.runtime.event.Event;
import java.util.function.Function;
import com.fluxtion.extension.declarative.api.numeric.NumericValue;
import com.fluxtion.extension.declarative.funclib.api.util.LambdaReflection.SerializableSupplier;
import com.fluxtion.extension.declarative.api.Wrapper;

/**
* @author Greg Higgins
*/
public interface ${className} {
#set($operands1  = ["S[] op1"         , "S op1"                              , "S op1"                              , "S[] op1"                            , "Class<S> eventClass1, Function<S, ?> accessor1", "Class<S> eventClass1, Function<S, ?> accessor1, String[] filters", "Class<S> eventClass1, Function<S, ?> accessor1, int[] filters", "Wrapper<S> handler1, Function<S, ?> accessor1", "Wrapper<S>[] handler1, Function<S, ?> accessor1", "S supplier1, SerializableSupplier<S, U> accessor1" ] )
#set($args1      = ["op1"             , "op1"                                , "op1"                                , "op1"                                , "eventClass1, accessor1"                        , "eventClass1, accessor1, filters"                                 , "eventClass1, accessor1, filters"                              , "handler1, accessor1"                          , "handler1, accessor1"                            , "supplier1, accessor1" ] )
#set($type1      = ["S extends Number", "S extends Number"                   , "S extends NumericValue"             , "S extends NumericValue"             , "S extends Event"                               , "S extends Event"                                                 , "S extends Event"                                              , "S"                                            , "S"                                              , "S, U"])
#set($typeReturn = ["Number"          , "Number"                             , "S"                                  , "S"                                  , "S"                                             , "S"                                                               , "S"                                                            , "S"                                            , "S"                                              , "S"])

#set($operands2 = ["T op2"            ,"T op2"                  , "Class<T> eventClass2, Function<T, ?> accessor2", "Wrapper<T> handler2, Function<T, ?> accessor2", "T supplier2, SerializableSupplier<T, V> accessor2" ] )
#set($args2     = ["op2"              ,"op2"                    ,"eventClass2, accessor2"                         ,  "handler2, accessor2"                         , "supplier2, accessor2" ] )
#set($type2     = ["T extends Number" ,"T extends NumericValue" , "T extends Event"                               , "T"                                            , "T, V"])
#set($i = 0)
#foreach ($op1 in $operands1)
#foreach ($op2 in $operands2)
    public static < $type1[$i], $type2[$foreach.index]> Test ${functionName}($op1, $op2){
        TestBuilder<${functionClass}, $typeReturn[$i]> testToBuild = TestBuilder.buildTest(${functionClass}.class,  $args1[  $i ]);
        testToBuild.arg($args2[  $foreach.index ]);
        return testToBuild.build();
    }

    public static < $type1[$i], $type2[$foreach.index]> Test ${functionName}Once($op1, $op2){
        TestBuilder<${functionClass}, $typeReturn[$i]> testToBuild = TestBuilder.buildTest(${functionClass}.class,  $args1[  $i ]);
        testToBuild.arg($args2[  $foreach.index ]);
        testToBuild.notifyOnChange(true);
        return testToBuild.build();
    }

    public static < $type1[$i], $type2[$foreach.index]> Wrapper<$typeReturn[$i]> ${functionName}Filter($op1, $op2){
        TestBuilder<${functionClass}, $typeReturn[$i]> testToBuild = TestBuilder.buildTest(${functionClass}.class,  $args1[  $i ]);
        testToBuild.arg($args2[  $foreach.index ]);
        return testToBuild.buildFilter();
    }

    public static < $type1[$i], $type2[$foreach.index]> Wrapper<$typeReturn[$i]> ${functionName}FilterOnce($op1, $op2){
        TestBuilder<${functionClass}, $typeReturn[$i]> testToBuild = TestBuilder.buildTest(${functionClass}.class,  $args1[  $i ]);
        testToBuild.arg($args2[  $foreach.index ]);
        testToBuild.notifyOnChange(true);
        return testToBuild.buildFilter();
    }

#end
#set($i = $i + 1 )
#end
}
