/* 
 * Copyright (C) 2016-2017 V12 Technology Limited. All rights reserved. 
 *
 * This software is subject to the terms and conditions of its EULA, defined in the
 * file "LICENCE.txt" and distributed with this software. All information contained
 * herein is, and remains the property of V12 Technology Limited and its licensors, 
 * if any. This source code may be protected by patents and patents pending and is 
 * also protected by trade secret and copyright law. Dissemination or reproduction 
 * of this material is strictly forbidden unless prior written permission is 
 * obtained from V12 Technology Limited.  
 */
package com.fluxtion.api.node;

import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 *
 * @author Greg Higgins
 */
public final class DeclarativeNodeConiguration {

    /**
     * The root nodes to create and the variable names they should be mapped to.
     * 
     */
    public final Map<Class, String> rootNodeMappings;

    /**
     * The set of factory classes used for node creation, each factory must
     * have default constructor so the SEP can instantiate the factory. 
     * The classes in factoryClassSet are instantiated and merged into the 
     * factorySet instances.
     */
    public final Set<Class<? extends NodeFactory>> factoryClassSet;

    /**
     * The factory instances registered that can create new new instances of
     * nodes.
     */
    public final Set<NodeFactory<?>> factorySet;

//    /**
//     * Map representing the name of the actual proxy class generated by a
//     * NodeGenerator. The real class name is only known after the proxy has been
//     * generated.
//     *
//     */
//    public final Map<Object, String> proxyClassMap;

    /**
     * the configuration used to generate the nodes
     */
    public final Map config;

    public DeclarativeNodeConiguration(Map<Class, String> rootNodeMappings, Set<Class<? extends NodeFactory>> factoryList, Map config) {
        this(rootNodeMappings, factoryList, config, null);
    }

    /**
     * 
     * @param rootNodeMappings
     * @param factoryList
     * @param config
     * @param factorySet 
     */
    @SuppressWarnings("unchecked")
    public DeclarativeNodeConiguration(Map<Class, String> rootNodeMappings, Set<Class<? extends NodeFactory>> factoryList, Map config, Set<NodeFactory<?>> factorySet) {
        this.rootNodeMappings = rootNodeMappings == null ? Collections.EMPTY_MAP : rootNodeMappings;
        this.factoryClassSet = factoryList == null ? new HashSet<>() : factoryList;
        this.factorySet = factorySet == null ? new HashSet<>() : factorySet;
        this.config = config == null ? Collections.EMPTY_MAP : config;
        //this.proxyClassMap = new HashMap<>();
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 89 * hash + Objects.hashCode(this.rootNodeMappings);
        hash = 89 * hash + Objects.hashCode(this.factoryClassSet);
        hash = 89 * hash + Objects.hashCode(this.factorySet);
        hash = 89 * hash + Objects.hashCode(this.config);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final DeclarativeNodeConiguration other = (DeclarativeNodeConiguration) obj;
        if (!Objects.equals(this.rootNodeMappings, other.rootNodeMappings)) {
            return false;
        }
        if (!Objects.equals(this.factoryClassSet, other.factoryClassSet)) {
            return false;
        }
        if (!Objects.equals(this.factorySet, other.factorySet)) {
            return false;
        }
        if (!Objects.equals(this.config, other.config)) {
            return false;
        }
        return true;
    }

    
}
